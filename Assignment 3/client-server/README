Name: Weichen Qiu
Student ID: 1578205

# Files

1. main.h - header file containing all the function definitions shared between files
2. server.cpp - main server source code file
3. client.cpp - main client source code file
4. tands.cpp - Trans() and Sleep() functions
5. utils.cpp - common util functions used repeatedly by server.cpp and client.cpp
6. Makefile - file that compiles the code, and generates object (.o) and man pdf files
7. server.man - source code for the server.pdf manual generated by groff
8. client.man - source code for the client.pdf manual generated by groff
9. server.pdf - manual for `./server` command
10. client.pdf - manual for `./client` command

# Assumptions

1. All server and client activity are recorded in their respectively log files. Only errors and some connection descriptors are printed to the terminal
2. The server is single-threaded
3. Server log file is called `server.log` and client log file is called `<machinename>.<pid>.log`

# Approach for the server

1. The server is in an infinite while loop that times outs after 30 seconds of inactivity
2. It is constantly accepting new connections to clients and closing connections to old clients
3. It is constantly reading in new messages from clients and processing the transactions
4. Because the server is only a single thread, each new client transaction request is blocked until the previous request terminates
5. The server maintains a map that records how many transactions each client requests. When a client makes a request, the client name is found in the map and its integer value is incremented by 1. This map is used to produced the summary when the server exits.
6. Because each request from the client must be logged by the client's machinename and pid, each request must contain the machinename and pid along with the transaction message. For example, a message from the client would be in this format: machinename.pid\tT<n>\t. When the server receives the message, it parses the message by splitting the string by the \t delimiter

# Approach for the client

1. Makes connection to the server
2. Reads in command from stdin, that is either from the command line or the input file
3. If the command is T<n>, then the client sends it to the server and awaits a Done receipt
4. If the command is S<n>, then the client calls the Sleep() function
5. Once all commands have been read and executed, the client terminates

# Compiling program

1. Run `make` to compile the `./server` and `./client` executables
2. Run `make man` to create the server and client pdf manuals
3. Run `make clean` to remove all object files (.o), executables (`./server` and `./client`), and .log files

# Running the program

1. First start the server using `./server <port>`, where `<port>` is an available port
2. Start any number of clients on other terminals using `./client <port> <ip_address>` Where `ip_address` is the ip address of the server and `port` is the port that the server is listening to
3. To run multiple clients simultaneously: `./client <client1.in & ./client <client2.in && fg`

# Attributions

- Client-server boiler plate code from: https://www.binarytides.com/server-client-example-c-sockets-linux/
- Multi-client server: https://www.geeksforgeeks.org/socket-programming-in-cc-handling-multiple-clients-on-server-without-multi-threading/
